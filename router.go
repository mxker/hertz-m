// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/requestid"
	handler "hertz-m/biz/handler"
	"hertz-m/biz/handler/person"
	"hertz-m/biz/middleware"
	"time"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	pprof.Register(r, "dev/pprof")

	// 跨域中间件
	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"https://foo.com"},
		AllowMethods:     []string{"PUT", "PATCH"},
		AllowHeaders:     []string{"Origin"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		AllowOriginFunc: func(origin string) bool {
			return origin == "https://github.com"
		},
		MaxAge: 12 * time.Hour,
	}))

	// 自定义requestId
	r.Use(requestid.New(
		requestid.WithGenerator(func(ctx context.Context, c *app.RequestContext) string {
			return "mxk hertz"
		}),
		requestid.WithCustomHeaderStrKey("mxk header key"),
	))

	// 全局错误中间件
	r.Use(middleware.ErrorHandler)

	// 日志中间件
	r.Use(middleware.AccessLog)

	r.GET("/ping", handler.Ping)

	// your code ...
	userGroup := r.Group("/user")
	userGroup.GET("/get/:age", person.GetInfo)
	userGroup.POST("/post", person.PostInfo)
	userGroup.POST("/any/:age", person.BindInfo)
}
